[project]
name = "pymai"
description = "Tiny-yet-powerful Python framework for building composable AI agents and durable workflows."
readme = "README.md"
requires-python = ">=3.11"
dynamic = [
    "version",
]

[tool.setuptools.dynamic]
version = {file=["version"]}

[tool.poetry]
package-mode = false
version = "0.0.0"

[tool.poetry.dependencies]
# Core Dependencies
anyio = "^4.9.0"
pydantic = "^2.11.7"
# Observability
opentelemetry-api = "^1.35.0"
opentelemetry-sdk = "^1.35.0"
opentelemetry-instrumentation = "^0.56b0"
# Async Support
asyncio-mqtt = "^0.16.2"
# Data Processing
numpy = "^2.3.2"
pandas = "^2.3.1"
# Utilities
click = "^8.2.1"
pyyaml = "^6.0.2"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.4.1"
pytest-asyncio = "^1.1.0"
pytest-cov = "^6.2.1"
pytest-mock = "^3.14.1"
# Code Quality
black = "^25.1.0"
ruff = "^0.12.5"
mypy = "^1.17.0"
pre-commit = "^4.2.0"
# Type Checking
types-requests = "^2.32.4.20250611"
# Documentation
sphinx = "^8.2.3"
sphinx-rtd-theme = "^3.0.2"
# Development Tools
ipython = "^9.4.0"
jupyter = "^1.1.1"
# Modern Development Tools
rich = "^14.1.0"
typer = "^0.16.0"
watchdog = "^6.0.0"

[tool.poetry-dynamic-versioning]
enable = true
from-file = {source="version"}

[tool.poetry-dynamic-versioning.substitution]
files = ["*.py", "*/__init__.py", "*/__version__.py", "*/_version.py"]
patterns = [
    '''(^__version__\s*(?::.*?)?=\s*['"])[^'"]*(['"])''',
    { value = '''(^__version_tuple__\s*(?::.*?)?=\s*\()[^)]*(\))''', mode = "tuple" },
]

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

# Development Tools Configuration

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Modern Python features
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "examples.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
